syntax="proto3";
package session_negotiation;

// session_negotiation broker
service SessionNegotiationBroker{

  // request session negotiation to other data hub's session listener
  rpc RequestSessionNegotiation(NegotiationInfo) returns (Reply) {}

  // check negotiation info & send result to other data hub's session listener
  rpc CheckNegotiation(Result) returns (Null) {}

}

message EndPoint {
  string ip = 1;
  int32 port = 2;
}

message SessionDescription {
  string session_creator = 1;
  string session_id = 2;
}

message DatamapDescription {
  repeated string datamap_list = 1;
  string data_catalog_vocab = 2;
  string datamap_sync_depth = 3;
}

message SynchronizationDescription {
  repeated int32 sync_time_cycle = 1;
  repeated int32 sync_count_cycle = 2;
  bool is_active_sync = 3;
  repeated string transfer_interface = 4;
}

message NegotiationInfo {
  SessionDescription session_desc = 1;
  DatamapDescription datamap_desc = 2;
  SynchronizationDescription sync_desc = 3;
}

message Reply {
  bool status = 1;
  EndPoint end_point = 2;
  NegotiationInfo negotiation_info = 3;
}

message Result {
  bool status = 1;
  EndPoint end_point = 2;
}

message Null {
}
